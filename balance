<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>マグネット・スタック・バランス</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.18.0/matter.min.js"></script>
</head>
<body>
    <h1>マグネット・スタック・バランス</h1>
    <div id="game-container">
        </div>
    <div id="score">スコア: 0</div>
    <button id="add-mascot">マスコットを追加</button>
    <script src="script.js"></script>
</body>
</html>
style.css
CSS

body {
    font-family: sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #f0f0f0;
    margin: 0;
    padding: 20px;
}

h1 {
    color: #333;
}

#game-container {
    width: 350px;
    height: 500px;
    background-color: #fff;
    border: 5px solid #4a90e2;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    /* Matter.js のキャンバスをこのコンテナ内に配置します */
    position: relative;
    overflow: hidden;
}

canvas {
    display: block;
}

#score {
    font-size: 1.5em;
    font-weight: bold;
    color: #d9534f;
    margin-bottom: 15px;
}

#add-mascot {
    padding: 10px 20px;
    font-size: 1em;
    cursor: pointer;
    background-color: #5cb85c;
    color: white;
    border: none;
    border-radius: 5px;
    transition: background-color 0.3s;
}

#add-mascot:hover {
    background-color: #4cae4c;
}
script.js
Matter.jsを使用して、オブジェクト（マスコット）がくっつく「磁石」の振る舞いをシミュレートします。ここでは、オブジェクト同士が接近したときに固定ジョイントで結合することで磁石のようにくっつく動きを表現します。

JavaScript

// Matter.js のエイリアス設定
const { Engine, Render, World, Bodies, Mouse, MouseConstraint, Constraint, Events } = Matter;

// ゲーム設定
const CONTAINER_WIDTH = 350;
const CONTAINER_HEIGHT = 500;
const MASCOT_SIZE = 40;
const MASCOT_GROUP = 1; // 衝突グループ

// エンジンの作成
const engine = Engine.create();
const world = engine.world;
engine.world.gravity.y = 1; // 重力設定

// レンダラーの作成
const render = Render.create({
    element: document.getElementById('game-container'),
    engine: engine,
    options: {
        width: CONTAINER_WIDTH,
        height: CONTAINER_HEIGHT,
        wireframes: false, // 塗りつぶし表示
        background: '#f8f8f8'
    }
});

Render.run(render);

// エンジンを実行
Engine.run(engine);

// --- 衝突グループ設定と初期オブジェクトの作成 ---

// 衝突グループの設定
// マスコットは互いに衝突する設定
const collisionGroup = {
    mascot: Matter.Body.nextGroup(true)
};

// 地面（台座）の作成
const ground = Bodies.rectangle(
    CONTAINER_WIDTH / 2, 
    CONTAINER_HEIGHT - 20, 
    CONTAINER_WIDTH, 
    40, 
    { 
        isStatic: true, // 動かない
        render: { fillStyle: '#8b4513' } // 茶色
    }
);

// 壁の作成
const wallOptions = {
    isStatic: true,
    render: { fillStyle: '#c0c0c0' }
};

const leftWall = Bodies.rectangle(10, CONTAINER_HEIGHT / 2, 20, CONTAINER_HEIGHT, wallOptions);
const rightWall = Bodies.rectangle(CONTAINER_WIDTH - 10, CONTAINER_HEIGHT / 2, 20, CONTAINER_HEIGHT, wallOptions);

// Worldにオブジェクトを追加
World.add(world, [ground, leftWall, rightWall]);

// --- マスコット生成と磁石ロジック ---

let mascotCount = 0;
let lastMascot = null;
const MASCOTS = [];
const MAGNETIC_DISTANCE = 60; // 磁石がくっつく距離

/**
 * 新しいマスコット（四角形）を作成し、ゲームに追加します。
 */
function addMascot() {
    // ランダムなX座標にマスコットを生成
    const x = Math.random() * (CONTAINER_WIDTH - 2 * MASCOT_SIZE) + MASCOT_SIZE;
    const y = 50; // 上部から落とす
    
    const mascot = Bodies.rectangle(x, y, MASCOT_SIZE, MASCOT_SIZE, {
        mass: 1,
        restitution: 0.2, // 反発係数
        friction: 0.8,    // 摩擦
        render: {
            fillStyle: `hsl(${Math.random() * 360}, 70%, 50%)`, // カラフルな色
            strokeStyle: '#333',
            lineWidth: 2
        },
        label: 'mascot'
    });

    World.add(world, mascot);
    MASCOTS.push(mascot);
    mascotCount++;
    document.getElementById('score').textContent = `スコア: ${mascotCount - 1}`; // 台座はカウントしない
    
    // ゲームオーバー判定用に、最も最近追加されたマスコットを記録
    lastMascot = mascot;
}

// 最初のマスコットを配置
addMascot();

// マウス操作を有効にする (ドラッグ可能にする)
const mouse = Mouse.create(render.canvas);
const mouseConstraint = MouseConstraint.create(engine, {
    mouse: mouse,
    constraint: {
        stiffness: 0.2,
        render: {
            visible: false
        }
    }
});

World.add(world, mouseConstraint);

// マスコット追加ボタンのイベントリスナー
document.getElementById('add-mascot').addEventListener('click', addMascot);

// --- ゲームロジック（磁石の結合とゲームオーバー判定） ---

/**
 * 磁石効果をシミュレートする関数
 * 接近したマスコット同士をConstraintで結合します。
 */
function applyMagnetism() {
    for (let i = 0; i < MASCOTS.length; i++) {
        for (let j = i + 1; j < MASCOTS.length; j++) {
            const bodyA = MASCOTS[i];
            const bodyB = MASCOTS[j];

            // 既に結合されているかチェック (簡略化のため省略)
            // ... 

            // 距離を計算
            const dx = bodyA.position.x - bodyB.position.x;
            const dy = bodyA.position.y - bodyB.position.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < MAGNETIC_DISTANCE) {
                // 距離が近ければ、固定ジョイントで結合
                const constraint = Constraint.create({
                    bodyA: bodyA,
                    bodyB: bodyB,
                    stiffness: 1, // 非常に硬いジョイント
                    length: distance,
                    render: {
                        visible: false // 結合線は非表示
                    }
                });
                World.add(world, constraint);
                
                // 一度結合したら、それ以降このペアのチェックは不要
                // (ただし、この例では常に全てのペアをチェックしています)
            }
        }
    }
}

/**
 * ゲームオーバーを判定する関数
 * 最後に追加したマスコットが、指定の高さを超えてしまったらゲームオーバー。
 */
function checkGameOver() {
    if (lastMascot && lastMascot.position.y < 50) { // 例: マスコットが上端(y=50)を超えたら
        alert(`ゲームオーバー！${mascotCount - 1}個積み上げました！`);
        // ゲームを停止
        Engine.clear(engine);
        Render.stop(render);
        document.getElementById('add-mascot').disabled = true;
    }
}


// Matter.js の更新イベントにロジックを追加
Events.on(engine, 'afterUpdate', () => {
    // 毎フレーム、磁石の効果をチェック（パフォーマンスのため、間隔を空けても良い）
    applyMagnetism(); 
    checkGameOver();
});
3. 遊び方
上記のコードをそれぞれindex.html、style.css、script.jsというファイル名で保存します。

index.htmlをWebブラウザで開きます。

**「マスコットを追加」**ボタンを押すと、上部から新しいマスコットが落下します。

マスコットは他のマスコットや台座に近づくと磁石のようにくっつきます。

マスコットが積み上がりすぎて、画面上端（Y座標: 50付近）を超えてしまうとゲームオーバーです。

マスコットはマウスでドラッグして動かすこともできます。

これで、磁石でできたマスコットを積み上げるバランスゲームの基本的な仕組みが完成しました。ぜひ、**MASCOT_SIZEやMAGNETIC_DISTANCE**などの数値を調整して、ゲームバランスをカスタマイズしてみてください！








一つのコードにしてください


承知いたしました。先のMatter.jsを使った「マグネット・スタック・バランス」ゲームを、HTML、CSS、JavaScriptのすべてを一つのindex.htmlファイルにまとめた形で提供します。

このファイルをブラウザで開くだけでゲームが起動します。

マグネット・スタック・バランス (Single File: index.html)
HTML

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>マグネット・スタック・バランス</title>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.18.0/matter.min.js"></script>

    <style>
        body {
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f0f0f0;
            margin: 0;
            padding: 20px;
        }

        h1 {
            color: #333;
        }

        #game-container {
            width: 350px;
            height: 500px;
            background-color: #fff;
            border: 5px solid #4a90e2;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            /* Matter.js のキャンバスをこのコンテナ内に配置します */
            position: relative;
            overflow: hidden;
        }

        canvas {
            display: block;
        }

        #score {
            font-size: 1.5em;
            font-weight: bold;
            color: #d9534f;
            margin-bottom: 15px;
        }

        #add-mascot {
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            background-color: #5cb85c;
            color: white;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        #add-mascot:hover {
            background-color: #4cae4c;
        }
    </style>
</head>
<body>
    <h1>マグネット・スタック・バランス</h1>
    <div id="game-container">
        </div>
    <div id="score">スコア: 0</div>
    <button id="add-mascot">マスコットを追加</button>

    <script>
        // Matter.js のエイリアス設定
        const { Engine, Render, World, Bodies, Mouse, MouseConstraint, Constraint, Events } = Matter;

        // --- ゲーム設定 ---
        const CONTAINER_WIDTH = 350;
        const CONTAINER_HEIGHT = 500;
        const MASCOT_SIZE = 40;
        const MAGNETIC_DISTANCE = 60; // 磁石がくっつく距離

        // --- エンジンの作成 ---
        const engine = Engine.create();
        const world = engine.world;
        engine.world.gravity.y = 1; // 重力設定

        // レンダラーの作成
        const render = Render.create({
            element: document.getElementById('game-container'),
            engine: engine,
            options: {
                width: CONTAINER_WIDTH,
                height: CONTAINER_HEIGHT,
                wireframes: false, // 塗りつぶし表示
                background: '#f8f8f8'
            }
        });

        Render.run(render);
        Engine.run(engine);

        // --- 初期オブジェクトの作成 ---

        // 地面（台座）の作成
        const ground = Bodies.rectangle(
            CONTAINER_WIDTH / 2, 
            CONTAINER_HEIGHT - 20, 
            CONTAINER_WIDTH, 
            40, 
            { 
                isStatic: true, // 動かない
                render: { fillStyle: '#8b4513' } // 茶色
            }
        );

        // 壁の作成
        const wallOptions = {
            isStatic: true,
            render: { fillStyle: '#c0c0c0' }
        };

        const leftWall = Bodies.rectangle(10, CONTAINER_HEIGHT / 2, 20, CONTAINER_HEIGHT, wallOptions);
        const rightWall = Bodies.rectangle(CONTAINER_WIDTH - 10, CONTAINER_HEIGHT / 2, 20, CONTAINER_HEIGHT, wallOptions);

        World.add(world, [ground, leftWall, rightWall]);

        // --- マスコットと磁石ロジック用変数 ---
        let mascotCount = 0;
        let lastMascot = null;
        const MASCOTS = [];
        const CONSTRAINTS = []; // 結合を管理するための配列

        /**
         * 新しいマスコットを作成し、ゲームに追加します。
         */
        function addMascot() {
            // ランダムなX座標にマスコットを生成
            const x = Math.random() * (CONTAINER_WIDTH - 2 * MASCOT_SIZE) + MASCOT_SIZE;
            const y = 50; // 上部から落とす
            
            // 既にゲームオーバーなら追加しない
            if (document.getElementById('add-mascot').disabled) return;

            const mascot = Bodies.rectangle(x, y, MASCOT_SIZE, MASCOT_SIZE, {
                mass: 1,
                restitution: 0.2, // 反発係数
                friction: 0.8,    // 摩擦
                render: {
                    fillStyle: `hsl(${Math.random() * 360}, 70%, 50%)`, // カラフルな色
                    strokeStyle: '#333',
                    lineWidth: 2
                },
                label: 'mascot'
            });

            World.add(world, mascot);
            MASCOTS.push(mascot);
            mascotCount++;
            document.getElementById('score').textContent = `スコア: ${mascotCount - 1}`; 
            
            lastMascot = mascot;
        }

        // 最初のマスコットを配置
        addMascot();

        // --- マウス操作 ---
        const mouse = Mouse.create(render.canvas);
        const mouseConstraint = MouseConstraint.create(engine, {
            mouse: mouse,
            constraint: {
                stiffness: 0.2,
                render: {
                    visible: false
                }
            }
        });
        World.add(world, mouseConstraint);

        // マスコット追加ボタンのイベントリスナー
        document.getElementById('add-mascot').addEventListener('click', addMascot);

        // --- ゲームロジック（磁石の結合とゲームオーバー判定） ---

        /**
         * 磁石効果をシミュレートする関数
         * 接近したマスコット同士をConstraintで結合します。
         */
        function applyMagnetism() {
            for (let i = 0; i < MASCOTS.length; i++) {
                for (let j = i + 1; j < MASCOTS.length; j++) {
                    const bodyA = MASCOTS[i];
                    const bodyB = MASCOTS[j];

                    // 既にこのペアが結合されているか確認 (簡略化)
                    const alreadyConnected = CONSTRAINTS.some(c => 
                        (c.bodyA === bodyA && c.bodyB === bodyB) || (c.bodyA === bodyB && c.bodyB === bodyA)
                    );
                    
                    if (alreadyConnected) continue;

                    // 距離を計算
                    const dx = bodyA.position.x - bodyB.position.x;
                    const dy = bodyA.position.y - bodyB.position.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);

                    if (distance < MAGNETIC_DISTANCE) {
                        // 距離が近ければ、固定ジョイントで結合
                        const constraint = Constraint.create({
                            bodyA: bodyA,
                            bodyB: bodyB,
                            stiffness: 1, 
                            length: distance, // 現在の距離を保つ
                            render: {
                                visible: false 
                            }
                        });
                        World.add(world, constraint);
                        CONSTRAINTS.push(constraint); // 結合を記録
                    }
                }
            }
        }

        /**
         * ゲームオーバーを判定する関数
         * 最後に追加したマスコットが、指定の高さを超えてしまったらゲームオーバー。
         */
        function checkGameOver() {
            // lastMascotのY座標が画面上端(Y=50)より小さい（上にある）場合
            if (lastMascot && lastMascot.position.y < 50) { 
                alert(`ゲームオーバー！ ${mascotCount - 1}個積み上げました！`);
                
                // ゲーム停止処理
                Engine.clear(engine);
                Render.stop(render);
                document.getElementById('add-mascot').disabled = true;
            }
        }


        // Matter.js の更新イベントにロジックを追加
        Events.on(engine, 'afterUpdate', () => {
            applyMagnetism(); 
            checkGameOver();
        });
    </script>
</body>
</html>
